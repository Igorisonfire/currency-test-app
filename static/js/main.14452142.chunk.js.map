{"version":3,"sources":["helpers/dateToString.ts","api/currency.api.ts","helpers/sortDataByDate.ts","const/currency.const.ts","helpers/transformCurrencyValue.ts","app/slices/messagesSlice.ts","app/slices/currencySlice.ts","helpers/convertCurrencyValues.ts","helpers/sortDataToChart.ts","helpers/transformChartGroup.ts","components/input/index.tsx","components/datepicker/index.tsx","img/european-union.svg","img/united-states.svg","img/switzerland.svg","img/calendar.svg","features/FormCard/index.tsx","helpers/transformOnlyNumber.ts","components/select/index.tsx","components/chart/index.tsx","features/ChartCard/index.tsx","features/Dashboard/index.tsx","img/preloader.svg","components/preloader-main/index.tsx","components/error-message/index.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["dateToString","date","toISOString","slice","dateToChartText","Date","toString","client","require","apiKey","CurrencyAPI","stringDate","historical","currencies","result","sortDataByDate","arr","sort","a","b","timestamp","CURRENCY_NAME","CURRENCY_OPTION","USD","value","label","EUR","CHF","CURRENCY_OPTIONS","SELECT_POSITION","transformCurrencyValue","toFixed","messagesSlice","createSlice","name","initialState","errorMessage","reducers","setErrorMessage","state","action","payload","actions","selectMessagesState","messages","data","currentDate","currentQuotes","convertedValues","chartData","selectedChartGroup","isFetching","currencySlice","setDataSegment","newDataSegment","quotes","setDataArray","setCurrentQuotes","setConvertValues","currencyName","EURCHF","USDCHF","USDEUR","usdValue","eurValue","chfValue","convertCurrencyValues","updateChartData","ratesName","first","second","i","segment","USDUSD","sortDataToChart","setSelectedChartGroup","option","position","initialSelectedChartGroup","transformChartGroup","setIsFetching","selectCurrencyState","currency","Input","props","id","onChange","className","join","trim","type","DatePickerComponent","selected","dateFormat","popperPlacement","onChangeRaw","e","preventDefault","maxDate","FormCard","dispatch","useDispatch","currencyState","useSelector","onChangeInput","event","inputData","target","replace","getState","stateData","length","response","localStorage","setItem","JSON","stringify","Error","message","console","log","getCurrentData","src","CalendarImage","alt","USImage","EUImage","SwitzerlandImage","SelectComponent","options","classNamePrefix","captureMenuScroll","menuPlacement","theme","colors","primary25","primary","neutral20","ChartComponent","reverseData","reverse","ResponsiveContainer","AreaChart","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","XAxis","dataKey","stroke","YAxis","domain","Tooltip","content","Area","activeDot","fill","strokeWidth","fillOpacity","CustomChartTooltip","active","ChartCard","onChangeSelect","Dashboard","PreloaderMain","spinner","ErrorMessage","onClick","App","useEffect","localCurrencyData","getItem","localCurrencyDataArray","parse","setDate","getDate","store","configureStore","reducer","currencyReducer","messagesReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.14452142.chunk.js","sourcesContent":["export const dateToString = (date: Date | null) => {\n    return date ? date.toISOString().slice(0, 10) : ''\n}\n\nexport const dateToChartText = (date: string) => {\n    return new Date(date).toString().slice(4, 10)\n}","import {dateToString} from '../helpers/dateToString'\nimport ICurrency from '../models/currency.model'\n\nconst CurrencyLayerClient = require('currencylayer-client')\nconst client = new CurrencyLayerClient({apiKey: '5f10a68b472c4e3f3bb2108c08e24178'})\n\ninterface ICurrencyAPI {\n    getCurrencyData(date?: Date): Promise<ICurrency.ModelApi>\n}\n\nexport const CurrencyAPI: ICurrencyAPI = {\n\n    async getCurrencyData(date?: Date): Promise<ICurrency.ModelApi> {\n\n        const stringDate = date ? dateToString(date) : dateToString(new Date())\n\n        try {\n            const result = await client.historical({currencies: ['EUR', 'USD', 'CHF'], date: stringDate})\n            return result\n        } catch (error) {\n            throw error\n        }\n    }\n}","import ICurrency from '../models/currency.model'\n\nexport const sortDataByDate = (arr: ICurrency.ModelLocal[]) => {\n    return arr.sort((a: ICurrency.ModelLocal, b: ICurrency.ModelLocal) => b.timestamp - a.timestamp)\n}","import {ISelectOption} from '../components/select'\n\nexport const CURRENCY_NAME = {\n    USD: 'USD',\n    EUR: 'EUR',\n    CHF: 'CHF',\n}\n\nexport const CURRENCY_OPTION = {\n    USD: {value: 'USD', label: 'USD'},\n    EUR: {value: 'EUR', label: 'EUR'},\n    CHF: {value: 'CHF', label: 'CHF'},\n}\n\nexport const CURRENCY_OPTIONS: ISelectOption[] = [\n    CURRENCY_OPTION.USD,\n    CURRENCY_OPTION.EUR,\n    CURRENCY_OPTION.CHF\n]\n\nexport const SELECT_POSITION = {\n    FIRST: 'FIRST',\n    SECOND: 'SECOND'\n}","export const transformCurrencyValue = (value: number) => {\n    return value ? value.toFixed(3).toString() : ''\n}","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {RootState} from '../store';\r\n\r\nexport interface IMessagesState {\r\n    errorMessage: string\r\n}\r\n\r\nconst initialState: IMessagesState = {\r\n    errorMessage: ''\r\n};\r\n\r\nexport const messagesSlice = createSlice({\r\n    name: 'messages',\r\n    initialState,\r\n    reducers: {\r\n        setErrorMessage: (state: IMessagesState, action: PayloadAction<string>) => {\r\n            const errorMessage = action.payload\r\n\r\n            return {\r\n                ...state,\r\n                errorMessage\r\n            }\r\n        }\r\n    },\r\n});\r\n\r\nexport const {\r\n    setErrorMessage\r\n} = messagesSlice.actions;\r\n\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectMessagesState = (state: RootState) => state.messages;\r\n\r\nexport default messagesSlice.reducer;\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../store';\r\nimport ICurrency from '../../models/currency.model'\r\nimport {CurrencyAPI} from '../../api/currency.api'\r\nimport {dateToString} from '../../helpers/dateToString'\r\nimport {sortDataByDate} from '../../helpers/sortDataByDate'\r\nimport {CURRENCY_NAME, CURRENCY_OPTION, SELECT_POSITION} from '../../const/currency.const'\r\nimport {sortDataToChart} from '../../helpers/sortDataToChart'\r\nimport {ISelectOption} from '../../components/select'\r\nimport {transformChartGroup} from '../../helpers/transformChartGroup'\r\nimport {convertCurrencyValues} from '../../helpers/convertCurrencyValues'\r\nimport {setErrorMessage} from './messagesSlice'\r\n\r\nexport interface ICurrencyState {\r\n  data: ICurrency.ModelLocal[];\r\n  currentDate: string\r\n  currentQuotes: ICurrency.Quotes | null\r\n  convertedValues: ICurrency.ConvertedValues | null,\r\n  chartData: ICurrency.ChartDataSegment[]\r\n  selectedChartGroup: ICurrency.SelectedChartGroup | null\r\n  isFetching: boolean\r\n}\r\n\r\nconst initialState: ICurrencyState = {\r\n  data: [],\r\n  currentDate: dateToString(new Date()),\r\n  currentQuotes: null,\r\n  convertedValues: null,\r\n  chartData: [],\r\n  selectedChartGroup: null,\r\n  isFetching: false,\r\n};\r\n\r\nexport const currencySlice = createSlice({\r\n  name: 'currency',\r\n  initialState,\r\n  reducers: {\r\n    setDataSegment: (state: ICurrencyState, action: PayloadAction<ICurrency.ModelApi>) => {\r\n      const newDataSegment: ICurrency.ModelLocal = {\r\n        date: action.payload.date,\r\n        quotes: action.payload.quotes,\r\n        timestamp: action.payload.timestamp\r\n      }\r\n\r\n      const data = sortDataByDate([...state.data, newDataSegment])\r\n\r\n      return {\r\n        ...state,\r\n        data,\r\n      }\r\n    },\r\n    setDataArray: (state: ICurrencyState, action: PayloadAction<ICurrency.ModelLocal[]>) => {\r\n      const data = sortDataByDate(action.payload)\r\n      const currentDate = data[0].date\r\n      const currentQuotes = data[0].quotes\r\n\r\n      return {\r\n        ...state,\r\n        data,\r\n        currentDate,\r\n        currentQuotes\r\n      }\r\n    },\r\n    setCurrentQuotes: (state: ICurrencyState, action: PayloadAction<{quotes: ICurrency.Quotes, date: string}>) => {\r\n      const currentQuotes = action.payload.quotes\r\n      const currentDate = action.payload.date\r\n\r\n      return {\r\n        ...state,\r\n        currentDate,\r\n        currentQuotes\r\n      }\r\n    },\r\n    setConvertValues: (state: ICurrencyState, action: PayloadAction<{value: string, currencyName: string}>) => {\r\n      const currencyName = action.payload.currencyName\r\n      const value = action.payload.value\r\n      const quotes = state.currentQuotes\r\n\r\n      let convertedValues = null\r\n\r\n      if (!quotes) return\r\n\r\n      convertedValues = convertCurrencyValues(quotes, value, currencyName)\r\n\r\n      return {\r\n        ...state,\r\n        convertedValues\r\n      }\r\n    },\r\n    updateChartData: (state: ICurrencyState) => {\r\n      const selectedChartGroup = state.selectedChartGroup\r\n      const firstValue = selectedChartGroup && selectedChartGroup.first ? selectedChartGroup.first.value : ''\r\n      const secondValue = selectedChartGroup && selectedChartGroup.second ? selectedChartGroup.second.value : ''\r\n      const ratesName = firstValue + secondValue\r\n      const chartData = sortDataToChart(state.data, ratesName)\r\n\r\n      return {\r\n        ...state,\r\n        chartData\r\n      }\r\n    },\r\n    setSelectedChartGroup: (state: ICurrencyState, action: PayloadAction<{option: ISelectOption, position: string}>) => {\r\n      const option = action.payload.option\r\n      const position = action.payload.position\r\n      let selectedChartGroup = transformChartGroup(state.selectedChartGroup, option, position)\r\n\r\n      return {\r\n        ...state,\r\n        selectedChartGroup\r\n      }\r\n    },\r\n    setIsFetching: (state: ICurrencyState, action: PayloadAction<boolean>) => {\r\n      const isFetching = action.payload\r\n\r\n      return {\r\n        ...state,\r\n        isFetching\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setDataSegment,\r\n  setDataArray,\r\n  setCurrentQuotes,\r\n  setConvertValues,\r\n  updateChartData,\r\n  setSelectedChartGroup,\r\n  setIsFetching\r\n} = currencySlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const getStartData = (): AppThunk => async (dispatch, getState) => {\r\n\r\n  dispatch(setIsFetching(true))\r\n\r\n  //get and set data from localstorage (if we have it there)\r\n  const localCurrencyData = localStorage.getItem('localCurrencyData')\r\n  const localCurrencyDataArray = localCurrencyData ? JSON.parse(localCurrencyData) : []\r\n  localCurrencyDataArray.length && dispatch(setDataArray(localCurrencyDataArray))\r\n\r\n\r\n  //get data for las 14 days (other than those available in the localstorage)\r\n  for (let i = 0; i < 14; i++) {\r\n    let date = new Date();\r\n    date.setDate(date.getDate() - i);\r\n\r\n    const stateData = getState().currency.data\r\n\r\n    if(!stateData.length || !stateData[i] || stateData[i].date !== dateToString(date)) {\r\n      try {\r\n        const response = await CurrencyAPI.getCurrencyData(date)\r\n        dispatch(setDataSegment(response))\r\n      } catch (error) {\r\n        dispatch(setIsFetching(false))\r\n        dispatch(setErrorMessage(new Error(error).message))\r\n        console.log(error)\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  //start initialization\r\n  dispatch(setCurrentQuotes({quotes: getState().currency.data[0].quotes, date: getState().currency.data[0].date}))\r\n  dispatch(setConvertValues({value: '1', currencyName: CURRENCY_NAME.USD}))\r\n  dispatch(setSelectedChartGroup({option: CURRENCY_OPTION.USD, position: SELECT_POSITION.FIRST}))\r\n  dispatch(setSelectedChartGroup({option: CURRENCY_OPTION.EUR, position: SELECT_POSITION.SECOND}))\r\n  dispatch(updateChartData())\r\n\r\n  //set updated data to localstorage\r\n  localStorage.setItem(\"localCurrencyData\", JSON.stringify(getState().currency.data))\r\n\r\n  dispatch(setIsFetching(false))\r\n}\r\n\r\nexport const getCurrentData = (date: Date): AppThunk => async (dispatch, getState) => {\r\n\r\n  const stateData = getState().currency.data\r\n\r\n  //check and set data for selected day from localstorage (if we have it there)\r\n  for (let i = 0; i < stateData.length; i++) {\r\n    if (stateData[i].date === dateToString(date)){\r\n      dispatch(setCurrentQuotes({quotes: stateData[i].quotes, date: dateToString(date)}))\r\n      dispatch(setConvertValues({value: '1', currencyName: CURRENCY_NAME.USD}))\r\n      return\r\n    }\r\n  }\r\n\r\n  //get data for selected day and set it to localstorage\r\n  try {\r\n    const response = await CurrencyAPI.getCurrencyData(date)\r\n    dispatch(setDataSegment(response))\r\n    dispatch(setCurrentQuotes({quotes: response.quotes, date: dateToString(date)}))\r\n    dispatch(setConvertValues({value: '1', currencyName: CURRENCY_NAME.USD}))\r\n    localStorage.setItem(\"localCurrencyData\", JSON.stringify(getState().currency.data));\r\n  } catch (error) {\r\n    dispatch(setErrorMessage(new Error(error).message))\r\n    console.log(error)\r\n  }\r\n}\r\n\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCurrencyState = (state: RootState) => state.currency;\r\n\r\nexport default currencySlice.reducer;\r\n","import {CURRENCY_NAME} from '../const/currency.const'\nimport {transformCurrencyValue} from './transformCurrencyValue'\nimport ICurrency from '../models/currency.model'\n\nexport const convertCurrencyValues = (quotes: ICurrency.Quotes, value: string, currencyName: string) => {\n    let convertedValues = null\n\n    const EURCHF = +(quotes.USDCHF / quotes.USDEUR).toFixed(6)\n\n    switch (currencyName) {\n        case CURRENCY_NAME.USD: {\n            convertedValues = {\n                usdValue: value,\n                eurValue: transformCurrencyValue(+value * quotes.USDEUR),\n                chfValue: transformCurrencyValue(+value * quotes.USDCHF)\n            }\n            break\n        }\n        case CURRENCY_NAME.EUR: {\n            convertedValues = {\n                usdValue: transformCurrencyValue(+value / quotes.USDEUR),\n                eurValue: value,\n                chfValue: transformCurrencyValue(+value * EURCHF)\n            }\n            break\n        }\n        case CURRENCY_NAME.CHF: {\n            convertedValues = {\n                usdValue: transformCurrencyValue(+value / quotes.USDCHF),\n                eurValue: transformCurrencyValue(+value / EURCHF),\n                chfValue: value\n            }\n            break\n        }\n        default: break\n    }\n\n    return convertedValues\n}","import ICurrency from '../models/currency.model'\nimport {CURRENCY_NAME} from '../const/currency.const'\nimport {dateToChartText} from './dateToString'\n\nexport const sortDataToChart = (data: ICurrency.ModelLocal[], ratesName: string) => {\n\n    let chartData: ICurrency.ChartDataSegment[] = []\n\n    for (let i = 0; i < 14; i++) {\n        switch (ratesName) {\n            case CURRENCY_NAME.USD + CURRENCY_NAME.EUR: {\n                const segment: ICurrency.ChartDataSegment = {\n                    value: +data[i].quotes.USDEUR.toFixed(3),\n                    date: dateToChartText(data[i].date)\n                }\n\n                chartData = [...chartData, segment]\n                break\n            }\n            case CURRENCY_NAME.USD + CURRENCY_NAME.CHF: {\n                const segment: ICurrency.ChartDataSegment = {\n                    value: +data[i].quotes.USDCHF.toFixed(3),\n                    date: dateToChartText(data[i].date)\n                }\n\n                chartData = [...chartData, segment]\n                break\n            }\n            case CURRENCY_NAME.EUR + CURRENCY_NAME.CHF: {\n                const EURCHF = +(data[i].quotes.USDCHF / data[i].quotes.USDEUR).toFixed(3)\n\n                const segment: ICurrency.ChartDataSegment = {\n                    value: EURCHF,\n                    date: dateToChartText(data[i].date)\n                }\n\n                chartData = [...chartData, segment]\n                break\n            }\n            case CURRENCY_NAME.EUR + CURRENCY_NAME.USD: {\n                const EURUSD = +(data[i].quotes.USDUSD / data[i].quotes.USDEUR).toFixed(3)\n\n                const segment: ICurrency.ChartDataSegment = {\n                    value: EURUSD,\n                    date: dateToChartText(data[i].date)\n                }\n\n                chartData = [...chartData, segment]\n                break\n            }\n            case CURRENCY_NAME.CHF + CURRENCY_NAME.USD: {\n                const CHFUSD = +(data[i].quotes.USDUSD / data[i].quotes.USDCHF).toFixed(3)\n\n                const segment: ICurrency.ChartDataSegment = {\n                    value: CHFUSD,\n                    date: dateToChartText(data[i].date)\n                }\n\n                chartData = [...chartData, segment]\n                break\n            }\n            case CURRENCY_NAME.CHF + CURRENCY_NAME.EUR: {\n                const CHFEUR = +(data[i].quotes.USDEUR / data[i].quotes.USDCHF).toFixed(3)\n\n                const segment: ICurrency.ChartDataSegment = {\n                    value: CHFEUR,\n                    date: dateToChartText(data[i].date)\n                }\n\n                chartData = [...chartData, segment]\n                break\n            }\n            default:\n                break\n        }\n    }\n\n    return chartData\n}","import ICurrency from '../models/currency.model'\nimport {ISelectOption} from '../components/select'\nimport {SELECT_POSITION} from '../const/currency.const'\n\nexport const transformChartGroup = (initialSelectedChartGroup: ICurrency.SelectedChartGroup | null, option: ISelectOption, position: string) => {\n    let selectedChartGroup = initialSelectedChartGroup\n\n    switch (position) {\n        case SELECT_POSITION.FIRST: {\n            if (selectedChartGroup && selectedChartGroup.second && selectedChartGroup.second.value === option.value) {\n                selectedChartGroup = {\n                    first: option,\n                    second: selectedChartGroup.first\n                }\n            } else {\n                selectedChartGroup = {\n                    first: option,\n                    second: selectedChartGroup ? selectedChartGroup.second : null\n                }\n            }\n            break\n        }\n        case SELECT_POSITION.SECOND: {\n            if (selectedChartGroup && selectedChartGroup.first && selectedChartGroup.first.value === option.value) {\n                selectedChartGroup = {\n                    first: selectedChartGroup.second,\n                    second: option\n                }\n            } else {\n                selectedChartGroup = {\n                    first: selectedChartGroup ? selectedChartGroup.first : null,\n                    second: option\n                }\n            }\n            break\n        }\n        default:\n            break\n    }\n\n    return selectedChartGroup\n}","import * as React from 'react';\nimport \"./index.scss\";\nimport {useState} from 'react'\n\ninterface IProps {\n  id?: string,\n  name: string,\n  value: string;\n  onChange(event: React.ChangeEvent<HTMLInputElement>): void;\n}\n\nexport const Input = (props: IProps) => {\n\n  const {id, onChange, value, name} = props\n  const className = [\n    'input-component',\n  ].join(' ').trim()\n\n  return(\n      <div className={className}>\n        <label>{name}</label>\n        <input id={id} type={'text'} value={value} onChange={onChange}/>\n      </div>\n  )\n}\n\nexport const useInput = (initialValue: string) => {\n  const [value, setValue] = useState(initialValue)\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value)\n  }\n\n  const clear = () => {\n    setValue('')\n  }\n\n  return{\n    value,\n    onChange,\n    clear\n  }\n}","import * as React from 'react'\nimport DatePicker from 'react-datepicker'\nimport 'react-datepicker/dist/react-datepicker.css'\n\nimport './index.scss'\nimport {useState} from 'react'\n\ninterface IProps {\n    name: string\n    selected: Date | null\n    onChange: (date: Date) => void\n}\n\nexport const DatePickerComponent = (props: IProps) => {\n    const {name, selected, onChange} = props\n\n    return(\n        <div className={'datepicker-custom-component'}>\n            <label>{name}</label>\n            <DatePicker\n                dateFormat={\"dd.MM.yyyy\"}\n                popperPlacement={'auto'}\n                selected={selected}\n                onChange={onChange}\n                onChangeRaw={(e) => {e.preventDefault()}}\n                maxDate={new Date()}\n            />\n        </div>\n    )\n}\n\nexport const useDatePicker = (initialValue: Date | null) => {\n    const [selected, setSelected] = useState(initialValue)\n\n    const onChange = (date: Date) => {\n        setSelected(date)\n    }\n\n    const clear = () => {\n        setSelected(null)\n    }\n\n    return{\n        selected,\n        onChange,\n        clear\n    }\n}\n","export default __webpack_public_path__ + \"static/media/european-union.3f54ee93.svg\";","export default __webpack_public_path__ + \"static/media/united-states.c29455bd.svg\";","export default __webpack_public_path__ + \"static/media/switzerland.167517f0.svg\";","export default __webpack_public_path__ + \"static/media/calendar.e78d8c05.svg\";","import React from 'react';\r\nimport './index.scss';\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {getCurrentData, selectCurrencyState, setConvertValues} from '../../app/slices/currencySlice'\r\nimport {Input} from '../../components/input'\r\nimport {DatePickerComponent} from '../../components/datepicker'\r\nimport {CURRENCY_NAME} from '../../const/currency.const'\r\nimport EUImage from '../../img/european-union.svg'\r\nimport USImage from '../../img/united-states.svg'\r\nimport SwitzerlandImage from '../../img/switzerland.svg'\r\nimport CalendarImage from '../../img/calendar.svg'\r\nimport {transformOnlyNumber} from '../../helpers/transformOnlyNumber'\r\n\r\nexport function FormCard() {\r\n    const dispatch = useDispatch()\r\n    const currencyState = useSelector(selectCurrencyState);\r\n    const convertedValues = currencyState.convertedValues\r\n    const currentDate = currencyState.currentDate\r\n\r\n    const onChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const inputData = {value: transformOnlyNumber(event.target.value), currencyName: event.target.id}\r\n        dispatch(setConvertValues(inputData))\r\n    }\r\n\r\n    const onChangeDate = (date: Date) => {\r\n        dispatch(getCurrentData(date))\r\n    }\r\n\r\n    return (\r\n        <form className={'form-card'}>\r\n            <h2>Converter</h2>\r\n            <div className={'input-plus-image'}>\r\n                <DatePickerComponent\r\n                    name={'Date'}\r\n                    selected={new Date(currentDate)}\r\n                    onChange={onChangeDate}/>\r\n                <img src={CalendarImage} alt='calendar'/>\r\n            </div>\r\n            <hr/>\r\n            {convertedValues &&\r\n            <div className={'inputs-layout'}>\r\n                <div className={'input-plus-image'}>\r\n                    <Input\r\n                        id={CURRENCY_NAME.USD}\r\n                        name={CURRENCY_NAME.USD}\r\n                        value={convertedValues.usdValue}\r\n                        onChange={onChangeInput}/>\r\n                    <img src={USImage} alt='US'/>\r\n                </div>\r\n                <div className={'input-plus-image'}>\r\n                    <Input\r\n                        id={CURRENCY_NAME.EUR}\r\n                        name={CURRENCY_NAME.EUR}\r\n                        value={convertedValues.eurValue}\r\n                        onChange={onChangeInput}/>\r\n                    <img src={EUImage} alt='EU'/>\r\n                </div>\r\n                <div className={'input-plus-image'}>\r\n                    <Input\r\n                        id={CURRENCY_NAME.CHF}\r\n                        name={CURRENCY_NAME.CHF}\r\n                        value={convertedValues.chfValue}\r\n                        onChange={onChangeInput}/>\r\n                    <img src={SwitzerlandImage} alt='Switzerland'/>\r\n                </div>\r\n            </div>}\r\n        </form>\r\n    );\r\n}\r\n","export const transformOnlyNumber = (value: string) => {\n    return value.replace(/^\\.|[^\\d\\.]|\\.(?=.*\\.)|^0+(?=\\d)/g, '');\n};\n","import * as React from 'react';\nimport Select, {ValueType} from 'react-select'\nimport \"./index.scss\";\n\ninterface IProps {\n    id: string\n    value: ISelectOption | null\n    onChange(value: ValueType<ISelectOption, boolean>, id: string): void\n    options: ISelectOption[],\n}\n\nexport interface ISelectOption {\n    label: string\n    value: string\n}\n\nexport const SelectComponent = (props: IProps) => {\n    const {onChange, value, id, options} = props\n\n    const onChangeSelect = (value: ValueType<ISelectOption, boolean>) => {\n        onChange && onChange(value, id)\n    }\n\n    return (\n        <div className={'select-component'}>\n            <Select\n                options={options}\n                classNamePrefix={'custom'}\n                onChange={onChangeSelect}\n                value={value}\n                captureMenuScroll={false}\n                menuPlacement={'auto'}\n                theme={theme => ({\n                    ...theme,\n                    colors: {\n                        ...theme.colors,\n                        primary25: '#ECEFF1',\n                        primary: '#DD2C00',\n                        neutral20: '#ECEFF1'\n                    },\n                })}\n            />\n        </div>\n    )\n}","import * as React from 'react';\nimport \"./index.scss\";\nimport {AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer} from 'recharts';\nimport ICurrency from '../../models/currency.model'\n\ninterface IProps {\n    data: ICurrency.ChartDataSegment[]\n}\n\nexport const ChartComponent = (props: IProps) => {\n    const {data} = props\n    const reverseData = data.slice().reverse()\n\n    return (\n        <div className={'chart-component'}>\n            <ResponsiveContainer>\n                <AreaChart data={reverseData} margin={{top: 10, right: 30, left: 0, bottom: 0,}}>\n                    <defs>\n                        <linearGradient id=\"customGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                            <stop offset=\"5%\" stopColor=\"#FF3D00\" stopOpacity={0.6}/>\n                            <stop offset=\"95%\" stopColor=\"#FF9E80\" stopOpacity={0.2}/>\n                        </linearGradient>\n                    </defs>\n                    <CartesianGrid strokeDasharray=\"1\"/>\n                    <XAxis dataKey=\"date\" stroke=\"#90A4AE\"/>\n                    <YAxis domain={['dataMin - 0.008', 'dataMax + 0.008']} stroke=\"#90A4AE\"/>\n                    <Tooltip content={<CustomChartTooltip/>} />\n                    <Area type=\"linear\" activeDot={{fill: '#FBE9E7', strokeWidth: 1, stroke: '#DD2C00'}}\n                          dataKey=\"value\" stroke=\"#DD2C00\" fillOpacity={1} fill=\"url(#customGradient)\"/>\n                </AreaChart>\n            </ResponsiveContainer>\n        </div>\n    )\n}\n\ninterface ICustomTooltipProps {\n    active?: boolean,\n    payload?: any,\n    label?: string\n}\n\nconst CustomChartTooltip = (props: ICustomTooltipProps) => {\n    const {active, payload, label} = props\n    if (active && payload && payload.length) {\n        return (\n            <div className=\"custom-chart-tooltip\">\n                <p className={'value'}>{payload[0].value}</p>\n                <p className={'date'}>{label}</p>\n            </div>\n        );\n    }\n\n    return null;\n};","import React from 'react';\r\nimport './index.scss';\r\nimport {ISelectOption, SelectComponent} from '../../components/select'\r\nimport {CURRENCY_OPTIONS, SELECT_POSITION} from '../../const/currency.const'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {selectCurrencyState, updateChartData, setSelectedChartGroup} from '../../app/slices/currencySlice'\r\nimport {ChartComponent} from '../../components/chart'\r\n\r\nexport function ChartCard() {\r\n    const dispatch = useDispatch()\r\n    const currencyState = useSelector(selectCurrencyState);\r\n    const selectedChartGroup = currencyState.selectedChartGroup\r\n    const chartData = currencyState.chartData\r\n\r\n    const onChangeSelect = (value: ISelectOption, id: string) => {\r\n        const selectedData = {option: value, position: id}\r\n        dispatch(setSelectedChartGroup(selectedData))\r\n        dispatch(updateChartData())\r\n    }\r\n\r\n    return (\r\n        <div className={'chart-card'}>\r\n            <h2>Last 2 weeks</h2>\r\n            {chartData && <ChartComponent data={chartData}/>}\r\n            {selectedChartGroup ?\r\n                <div className={'select-group'}>\r\n                    <SelectComponent\r\n                        options={CURRENCY_OPTIONS}\r\n                        id={SELECT_POSITION.FIRST}\r\n                        value={selectedChartGroup.first}\r\n                        onChange={onChangeSelect}/>\r\n                    <SelectComponent\r\n                        options={CURRENCY_OPTIONS}\r\n                        id={SELECT_POSITION.SECOND}\r\n                        value={selectedChartGroup.second}\r\n                        onChange={onChangeSelect}/>\r\n                </div> : null}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './index.scss';\r\nimport {useSelector} from 'react-redux'\r\nimport {selectCurrencyState} from '../../app/slices/currencySlice'\r\nimport {FormCard} from '../FormCard'\r\nimport {ChartCard} from '../ChartCard'\r\n\r\nexport function Dashboard() {\r\n    const currencyState = useSelector(selectCurrencyState)\r\n    const mainData = currencyState.data\r\n\r\n    if (mainData.length) {\r\n        return (\r\n            <div className={'dashboard-wrapper global-container'}>\r\n                <h1>Currency Dashboard</h1>\r\n                <div className={'dashboard-grid'}>\r\n                    <FormCard/>\r\n                    <ChartCard/>\r\n                </div>\r\n            </div>\r\n        );\r\n    } else return (\r\n        <div className={'wrong-view'}>\r\n            <h1>Oops..!</h1>\r\n            <br/>\r\n            <h3>Something went wrong</h3>\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/preloader.3ae0416b.svg\";","import * as React from 'react'\nimport './index.scss'\nimport spinner from '../../img/preloader.svg'\n\ninterface IProps {\n}\n\nexport const PreloaderMain = ({}: IProps) => (\n  <div className={`preloader`}>\n    <img src={spinner} alt=\"spinner\"/>\n  </div>\n)","import * as React from 'react';\nimport \"./index.scss\";\nimport {selectMessagesState, setErrorMessage} from '../../app/slices/messagesSlice'\nimport {useDispatch, useSelector} from 'react-redux'\n\ninterface IProps {\n}\n\nexport const ErrorMessage = (props: IProps) => {\n    const dispatch = useDispatch()\n    const messagesState = useSelector(selectMessagesState);\n    const errorMessage = messagesState.errorMessage\n\n    const onClose = () => {\n        dispatch(setErrorMessage(''))\n    }\n\n    if (errorMessage.length) {\n        return (\n            <div className={'error-message'}>\n                <p>{errorMessage}</p>\n                <div className={'close'} onClick={onClose}>x</div>\n            </div>\n        )\n    } else return null\n}","import React, {useEffect} from 'react';\r\nimport './App.scss';\r\nimport {Dashboard} from './features/Dashboard'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {getStartData, selectCurrencyState} from './app/slices/currencySlice'\r\nimport {PreloaderMain} from './components/preloader-main'\r\nimport {ErrorMessage} from './components/error-message'\r\n\r\nfunction App() {\r\n    const dispatch = useDispatch()\r\n    const currencyState = useSelector(selectCurrencyState);\r\n    const isFetching = currencyState.isFetching\r\n\r\n    useEffect(() => {\r\n        dispatch(getStartData())\r\n    }, [])\r\n\r\n    if (isFetching) return <PreloaderMain/>\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorMessage/>\r\n            <Dashboard/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\r\nimport currencyReducer from '../app/slices/currencySlice';\r\nimport messagesReducer from '../app/slices/messagesSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    currency: currencyReducer,\r\n    messages: messagesReducer\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}